------------------using queue------------------------------



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        if root is None:
            return []
        col_table = defaultdict(list)  # col -> list of (row, val)
        q = deque([(root, 0, 0)])      # elements: (node, row, col)
        min_col = max_col = 0
        while q:
            node, row, col = q.popleft()
            col_table[col].append((row, node.val))
            if node.left:
                q.append((node.left, row + 1, col - 1))
            if node.right:
                q.append((node.right, row + 1, col + 1))
            min_col = min(min_col, col)
            max_col = max(max_col, col)

        result = []
        for c in range(min_col, max_col + 1):
        # sort by row first, then value
            col_nodes = sorted(col_table[c], key=lambda x: (x[0], x[1]))
            result.append([val for _, val in col_nodes])

        return result
        
