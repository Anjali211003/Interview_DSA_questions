---------------using dp table ------------------------



class Solution {
  public:
    bool wildCard(string &txt, string &pat) {

       int n=txt.size(),m=pat.size();
        // vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        vector<int> prev(m+1,0),curr(m+1,0);
        prev[0]=1;
        for(int i=1;i<=m;i++){
            if(pat[i-1]=='*'){
                prev[i]=1;
            }
            else break;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(pat[j-1]=='?'){
                    curr[j]=prev[j-1];
                }
                else if(pat[j-1]=='*'){
                    curr[j]=prev[j-1] || prev[j] || curr[j-1];
                }
                else if(pat[j-1]==txt[i-1]){
                    curr[j]=prev[j-1];
                }
                else curr[j]=false;
            }
            prev=curr;
        }
        return prev[m];
    }
};







-----------using greedy approach------------------------
class Solution {
public:
    bool wildCard(string &txt, string &pat) {
        int n = txt.size(), m = pat.size();
        
        // Step 1: collapse multiple '*'
        string newPat;
        for (int i = 0; i < m; i++) {
            if (pat[i] == '*' && !newPat.empty() && newPat.back() == '*')
                continue; // skip duplicate '*'
            newPat.push_back(pat[i]);
        }
        pat = newPat;
        m = pat.size();
        
        // Step 2: greedy match
        int i = 0, j = 0;   // i->text, j->pattern
        int starIdx = -1, iIdx = -1;
        
        while (i < n) {
            if (j < m && (pat[j] == txt[i] || pat[j] == '?')) {
                i++; j++;  // direct match
            } 
            else if (j < m && pat[j] == '*') {
                starIdx = j;
                iIdx = i;
                j++; // move pattern pointer
            }
            else if (starIdx != -1) {
                j = starIdx + 1;   // retry after last '*'
                iIdx++;
                i = iIdx;
            }
            else {
                return false; // no match
            }
        }
        
        // consume remaining stars in pattern
        while (j < m && pat[j] == '*') j++;
        
        return j == m;
    }
};
